Project is separated by 4 major classes:
- InputInterface
  # Parses input file and creates new BellmanFordStructure object
- BellmanFordStructure
  # A collection of nodes (and links).
  # The Bellman-Ford algorithm is impelemented in this class.
  # Provides distance and predecessor tracking data structure.
- Node
  # Simple class to represent a single node.
  # Has unique ID.
  # Has link target and its distance to target node.
- OutputInterface
  # Reads BellmanFordStructure object.
  # Generates output file output.txt

Bellman-Ford algorithm implementation:
1. Initialization
   - Set up distances[N] and predecessors[N], where N is the node count in graph
   - Prepopulate all distances and predecessors to INFINITY
     > INFINITY is defined as unsigned 32-bit integer 0xFFFFFFFF (2**32 - 1)
2. Induction base case
   - Set distances[0] and predecessors[0] to 0
3. Induction inductive step
   - Initialize variable <changes_made> to 0
   - For each element <x> in distances[] that is not INF:
     > For each edge to <v> that originates from node <x>:
       + If distances[x] + edge(x, v) < distances[v]
         Then distances[v] = distances[x] + edge(x, v)
              set predecessors[v] = x
              increment <changes_made>
4. Early termination check
   - If <changes_made> == 0, early termination is detected and algorithm is complete
   - Otherwise, repeat inductive step 3

Observation:
- The number of iteration indicates the maximum hops needed to reach any node within the graph from source node. In other word, any node is reachable in N hops or less (with the first hop being to reach the source node itself a.k.a. base case). This is under the assumption that all nodes are physically reachable from the source node.

Result from running N7.csv
0,33,13,10,24,26,38
0
0->3->1
0->3->2
0->3
0->3->4
0->3->4->5
0->3->1->6
Iteration: 4

Result from running N10.csv
0,5,3,10,2,8,7,1,7,8
0
0->4->1
0->2
0->2->6->3
0->4
0->4->1->5
0->2->6
0->7
0->4->1->8
0->2->6->9
Iteration: 4

Result from running N20.csv
0,4,6,7,6,4,10,7,7,4,9,7,8,6,5,3,5,7,4,5
0
0->15->1
0->15->1->2
0->5->19->3
0->4
0->5
0->18->6
0->5->7
0->15->9->8
0->15->9
0->15->9->10
0->18->11
0->15->12
0->15->13
0->5->14
0->15
0->18->16
0->15->9->17
0->18
0->5->19
Iteration: 4

